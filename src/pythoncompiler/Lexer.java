/* The following code was generated by JFlex 1.6.1 */

/* --------------------------Codigo de Usuario----------------------- */
package pythoncompiler;

import java_cup.runtime.*;
import java.io.Reader;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\25\2\0\1\22\22\0\1\24\1\35\1\23\1\21"+
    "\1\0\1\33\1\40\1\50\1\51\1\52\1\31\1\30\1\56\1\30"+
    "\1\57\1\32\1\70\1\74\6\75\2\73\1\55\1\60\1\36\1\34"+
    "\1\37\1\0\1\0\1\41\1\72\1\76\1\43\1\77\1\101\3\27"+
    "\1\100\1\27\1\67\1\27\1\42\1\44\2\27\1\45\1\27\1\46"+
    "\1\27\2\27\1\71\2\27\1\53\1\2\1\54\1\40\1\27\1\0"+
    "\1\11\1\17\1\12\1\47\1\20\1\6\1\16\1\13\1\3\1\100"+
    "\1\64\1\7\1\27\1\4\1\10\1\62\1\27\1\14\1\15\1\5"+
    "\1\66\1\27\1\61\1\65\1\63\1\27\1\0\1\40\1\0\1\40"+
    "\100\0\1\1\1\0\1\1\7\0\1\1\3\0\1\1\3\0\1\1"+
    "\1\0\1\1\6\0\1\1\5\0\1\1\1\1\2\0\1\1\3\0"+
    "\1\1\1\1\1\0\1\1\1\1\1\1\1\0\1\1\1\0\1\1"+
    "\1\1\1\1\2\0\1\1\2\0\1\1\1\1\1\0\1\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff13\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\15\3\2\4\1\1\1\4\3\5"+
    "\1\6\1\1\2\7\1\10\5\3\1\1\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\2\3\2\21"+
    "\1\3\2\22\1\23\1\24\7\3\1\25\13\3\1\0"+
    "\1\26\1\27\1\6\1\7\4\3\2\0\1\21\2\3"+
    "\1\26\1\21\4\26\1\21\1\0\1\3\1\30\1\3"+
    "\1\0\1\31\2\3\1\32\1\3\1\33\13\3\1\27"+
    "\1\0\1\26\1\3\1\34\1\0\1\35\1\0\2\3"+
    "\1\0\2\26\4\21\1\0\3\21\1\0\1\21\2\3"+
    "\1\0\2\3\1\36\2\3\1\37\5\3\1\40\1\41"+
    "\1\3\2\26\2\0\1\26\1\42\1\26\2\3\4\26"+
    "\1\0\4\21\1\43\1\0\1\3\1\44\1\45\1\3"+
    "\1\46\3\3\1\47\1\3\1\26\1\0\1\26\1\50"+
    "\1\51\1\0\2\26\1\0\1\26\1\52\2\3\1\53"+
    "\1\54\1\3\1\55\1\0\1\4\2\26\1\56\1\3"+
    "\1\57\1\26\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\102\0\u04e6\0\u0528\0\u056a\0\u05ac"+
    "\0\u05ac\0\u05ee\0\u0630\0\102\0\u0672\0\u06b4\0\u06f6\0\u0738"+
    "\0\u077a\0\u07bc\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\u07fe\0\102\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\204"+
    "\0\u098a\0\u09cc\0\u02d6\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16"+
    "\0\u0b58\0\u0b9a\0\u02d6\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4"+
    "\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0eb2"+
    "\0\u0ef4\0\102\0\102\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e"+
    "\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u1188\0\u11ca\0\u120c"+
    "\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u02d6\0\u1398\0\u13da"+
    "\0\u02d6\0\u141c\0\u145e\0\u02d6\0\u14a0\0\u02d6\0\u14e2\0\u1524"+
    "\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734"+
    "\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u02d6\0\u18c0\0\u1902"+
    "\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12"+
    "\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22"+
    "\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u02d6\0\u1eae\0\u1ef0"+
    "\0\u02d6\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u02d6\0\u02d6"+
    "\0\u207c\0\u17b8\0\102\0\u20be\0\u2100\0\u2142\0\u02d6\0\u1902"+
    "\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352"+
    "\0\u2394\0\u23d6\0\u2418\0\u02d6\0\u245a\0\u249c\0\u02d6\0\u02d6"+
    "\0\u24de\0\u02d6\0\u2520\0\u2562\0\u25a4\0\u02d6\0\u25e6\0\u2628"+
    "\0\u2628\0\u266a\0\u02d6\0\u02d6\0\u26ac\0\u26ee\0\u2730\0\u2772"+
    "\0\u1d22\0\102\0\u27b4\0\u27f6\0\u02d6\0\u02d6\0\u2838\0\u02d6"+
    "\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u02d6\0\u2982\0\u02d6\0\u28bc"+
    "\0\u02d6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\14\1\17\1\20"+
    "\1\21\1\22\1\23\3\24\1\14\1\25\1\26\1\27"+
    "\1\25\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\14\1\37\1\14\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\5\14\1\55\2\14\3\56\3\14\1\57\103\0\2\60"+
    "\16\61\6\0\1\61\11\0\7\61\11\0\7\61\1\0"+
    "\2\61\3\0\4\61\1\0\2\60\1\14\1\62\1\14"+
    "\1\63\6\14\1\64\3\14\6\0\1\14\11\0\7\14"+
    "\11\0\21\14\1\0\2\60\5\14\1\65\10\14\6\0"+
    "\1\14\11\0\7\14\11\0\21\14\1\0\2\60\11\14"+
    "\1\66\4\14\6\0\1\14\11\0\7\14\11\0\21\14"+
    "\1\0\2\60\1\67\3\14\1\70\1\71\10\14\6\0"+
    "\1\14\11\0\7\14\11\0\21\14\1\0\2\60\1\72"+
    "\15\14\6\0\1\14\11\0\7\14\11\0\21\14\1\0"+
    "\2\60\11\14\1\73\4\14\6\0\1\14\11\0\7\14"+
    "\11\0\21\14\1\0\2\60\1\14\1\74\14\14\6\0"+
    "\1\14\11\0\7\14\11\0\21\14\1\0\2\60\4\14"+
    "\1\75\1\76\2\14\1\77\5\14\6\0\1\14\11\0"+
    "\7\14\11\0\21\14\1\0\2\60\16\14\6\0\1\14"+
    "\11\0\7\14\11\0\21\14\1\0\2\60\6\14\1\100"+
    "\6\14\1\101\6\0\1\14\11\0\7\14\11\0\21\14"+
    "\1\0\2\60\2\14\1\102\13\14\6\0\1\14\11\0"+
    "\7\14\11\0\21\14\1\0\2\60\5\14\1\103\3\14"+
    "\1\104\4\14\6\0\1\14\11\0\7\14\11\0\21\14"+
    "\1\0\2\60\4\14\1\105\11\14\6\0\1\14\11\0"+
    "\7\14\11\0\4\14\1\106\14\14\22\21\1\0\2\21"+
    "\1\0\54\21\25\0\1\24\54\0\2\107\1\110\17\107"+
    "\1\0\1\111\1\107\1\0\54\107\34\0\1\112\76\0"+
    "\1\25\2\0\1\112\77\0\1\25\1\0\1\112\101\0"+
    "\1\113\101\0\1\113\1\0\1\34\1\113\76\0\1\113"+
    "\2\0\1\34\43\0\2\60\16\14\6\0\1\14\11\0"+
    "\1\14\1\114\5\14\11\0\21\14\1\0\2\60\16\14"+
    "\6\0\1\14\11\0\3\14\1\115\3\14\11\0\21\14"+
    "\1\0\2\60\16\14\6\0\1\14\11\0\4\14\1\73"+
    "\2\14\11\0\21\14\1\0\2\60\11\14\1\116\4\14"+
    "\6\0\1\14\11\0\7\14\11\0\21\14\1\0\2\60"+
    "\15\14\1\117\6\0\1\14\11\0\7\14\11\0\21\14"+
    "\50\120\1\121\31\120\70\0\1\122\2\0\3\122\5\0"+
    "\2\60\10\14\1\123\5\14\6\0\1\14\11\0\7\14"+
    "\11\0\21\14\1\0\2\60\11\14\1\124\4\14\6\0"+
    "\1\14\11\0\7\14\11\0\21\14\1\0\6\125\1\126"+
    "\1\127\6\125\1\130\1\131\6\0\1\125\11\0\3\125"+
    "\1\127\3\125\7\0\1\122\1\0\4\125\1\132\1\125"+
    "\1\126\1\133\1\132\1\130\1\134\2\133\1\125\1\131"+
    "\1\126\1\125\1\0\6\125\1\126\10\125\1\131\6\0"+
    "\1\125\11\0\7\125\7\0\1\122\1\0\6\125\1\126"+
    "\1\56\2\125\3\56\1\125\1\131\1\126\1\125\1\0"+
    "\2\60\6\14\1\135\7\14\6\0\1\14\11\0\7\14"+
    "\11\0\21\14\1\0\2\60\16\61\6\0\1\61\11\0"+
    "\7\61\11\0\21\61\1\0\2\60\2\14\1\136\13\14"+
    "\6\0\1\14\11\0\7\14\11\0\1\14\1\137\17\14"+
    "\1\0\2\60\16\14\3\0\1\140\2\0\1\14\11\0"+
    "\7\14\11\0\21\14\1\0\2\60\2\14\1\73\13\14"+
    "\6\0\1\14\11\0\7\14\11\0\21\14\1\0\2\60"+
    "\16\14\6\0\1\14\11\0\7\14\11\0\2\14\1\141"+
    "\16\14\1\0\2\60\1\14\1\142\14\14\6\0\1\14"+
    "\11\0\7\14\11\0\21\14\1\0\2\60\5\14\1\143"+
    "\10\14\6\0\1\14\11\0\7\14\11\0\21\14\1\0"+
    "\2\60\11\14\1\144\4\14\6\0\1\14\11\0\7\14"+
    "\11\0\21\14\1\0\2\60\12\14\1\145\3\14\6\0"+
    "\1\14\11\0\7\14\11\0\21\14\1\0\2\60\16\14"+
    "\6\0\1\14\11\0\6\14\1\146\11\0\21\14\1\0"+
    "\2\60\6\14\1\147\7\14\6\0\1\14\11\0\7\14"+
    "\11\0\21\14\1\0\2\60\1\14\1\150\14\14\6\0"+
    "\1\14\11\0\7\14\11\0\21\14\1\0\2\60\6\14"+
    "\1\151\7\14\6\0\1\14\11\0\7\14\11\0\21\14"+
    "\1\0\2\60\1\14\1\152\14\14\6\0\1\14\11\0"+
    "\7\14\11\0\21\14\1\0\2\60\2\14\1\153\13\14"+
    "\6\0\1\14\11\0\7\14\11\0\21\14\1\0\2\60"+
    "\11\14\1\154\4\14\6\0\1\14\11\0\7\14\11\0"+
    "\21\14\1\0\2\60\5\14\1\155\10\14\6\0\1\14"+
    "\11\0\7\14\11\0\21\14\1\0\2\60\15\14\1\156"+
    "\6\0\1\14\11\0\7\14\11\0\21\14\1\0\2\60"+
    "\1\157\11\14\1\160\3\14\6\0\1\14\11\0\7\14"+
    "\11\0\21\14\1\0\2\60\7\14\1\161\6\14\6\0"+
    "\1\14\11\0\7\14\11\0\21\14\2\107\1\110\17\107"+
    "\1\0\1\162\1\107\1\0\54\107\22\163\1\0\1\164"+
    "\1\163\1\0\54\163\1\0\2\60\16\14\6\0\1\14"+
    "\11\0\2\14\1\73\4\14\11\0\21\14\1\0\2\60"+
    "\16\14\6\0\1\14\11\0\5\14\1\73\1\14\11\0"+
    "\21\14\1\0\2\60\16\14\6\0\1\14\11\0\7\14"+
    "\11\0\5\14\1\165\13\14\1\0\2\60\3\14\1\166"+
    "\12\14\6\0\1\14\11\0\7\14\11\0\21\14\50\167"+
    "\1\170\31\167\50\171\1\121\31\171\1\0\17\125\1\131"+
    "\6\0\1\125\11\0\7\125\11\0\7\125\1\122\2\125"+
    "\3\122\1\125\1\131\1\126\1\125\1\0\2\60\1\172"+
    "\15\14\6\0\1\14\11\0\7\14\11\0\21\14\1\0"+
    "\2\60\1\173\15\14\6\0\1\14\11\0\7\14\11\0"+
    "\21\14\1\0\20\125\6\0\1\125\11\0\7\125\7\0"+
    "\1\174\1\0\7\125\1\175\2\125\3\176\4\125\1\0"+
    "\20\125\6\0\1\125\11\0\7\125\7\0\1\174\1\0"+
    "\7\125\1\177\2\125\1\176\2\200\4\125\1\0\20\125"+
    "\6\0\1\125\11\0\7\125\7\0\1\174\1\0\7\125"+
    "\1\201\2\125\1\176\1\202\1\176\4\125\1\0\20\125"+
    "\6\0\1\125\1\203\10\0\7\125\7\0\1\174\1\0"+
    "\7\125\1\175\2\125\3\176\4\125\1\0\5\125\1\204"+
    "\2\125\2\204\4\125\2\204\6\0\1\125\11\0\1\204"+
    "\1\125\1\204\3\125\1\204\7\0\1\174\1\0\7\125"+
    "\1\205\1\125\1\204\3\206\2\204\1\125\1\204\1\0"+
    "\6\125\1\126\10\125\1\131\6\0\1\125\11\0\7\125"+
    "\7\0\1\122\1\0\6\125\1\126\1\133\2\125\1\134"+
    "\2\133\1\125\1\131\1\126\1\125\20\0\1\207\36\0"+
    "\1\122\10\0\1\134\2\0\3\134\1\0\1\207\1\210"+
    "\2\0\2\60\4\14\1\211\11\14\6\0\1\14\11\0"+
    "\7\14\11\0\21\14\1\0\2\60\16\14\6\0\1\14"+
    "\11\0\7\14\11\0\5\14\1\212\13\14\4\0\1\213"+
    "\76\0\2\60\6\14\1\214\7\14\6\0\1\14\11\0"+
    "\7\14\11\0\21\14\1\0\2\60\6\14\1\215\7\14"+
    "\6\0\1\14\11\0\7\14\11\0\21\14\1\0\2\60"+
    "\2\14\1\216\13\14\6\0\1\14\11\0\7\14\11\0"+
    "\21\14\1\0\2\60\12\14\1\217\3\14\6\0\1\14"+
    "\11\0\7\14\11\0\21\14\1\0\2\60\2\14\1\220"+
    "\13\14\6\0\1\14\11\0\7\14\11\0\21\14\1\0"+
    "\2\60\11\14\1\221\4\14\6\0\1\14\11\0\7\14"+
    "\11\0\21\14\1\0\2\60\13\14\1\222\2\14\6\0"+
    "\1\14\11\0\7\14\11\0\21\14\1\0\2\60\16\14"+
    "\6\0\1\14\11\0\7\14\11\0\5\14\1\223\13\14"+
    "\1\0\2\60\1\224\15\14\6\0\1\14\11\0\7\14"+
    "\11\0\21\14\1\0\2\60\4\14\1\225\11\14\6\0"+
    "\1\14\11\0\7\14\11\0\21\14\1\0\2\60\6\14"+
    "\1\226\7\14\6\0\1\14\11\0\7\14\11\0\21\14"+
    "\1\0\2\60\3\14\1\227\12\14\6\0\1\14\11\0"+
    "\7\14\11\0\21\14\1\0\2\60\15\14\1\230\6\0"+
    "\1\14\11\0\7\14\11\0\21\14\1\0\2\60\15\14"+
    "\1\231\6\0\1\14\11\0\7\14\11\0\21\14\23\0"+
    "\1\232\56\0\22\163\1\0\1\233\1\163\1\0\54\163"+
    "\22\234\1\235\1\236\1\234\1\235\54\234\1\0\2\60"+
    "\15\14\1\237\6\0\1\14\11\0\7\14\11\0\21\14"+
    "\50\167\1\240\31\167\50\0\1\240\31\0\50\171\1\233"+
    "\31\171\1\0\2\60\4\14\1\241\11\14\6\0\1\14"+
    "\11\0\7\14\11\0\21\14\1\0\2\60\1\14\1\242"+
    "\14\14\6\0\1\14\11\0\7\14\11\0\21\14\70\0"+
    "\1\243\2\0\3\243\5\0\17\125\1\244\6\0\1\125"+
    "\11\0\7\125\7\0\1\243\1\0\4\125\1\245\2\125"+
    "\1\246\1\245\1\125\1\247\2\246\1\125\1\244\2\125"+
    "\1\0\17\125\1\244\6\0\1\125\11\0\7\125\7\0"+
    "\1\243\1\0\7\125\1\176\2\125\3\176\1\125\1\244"+
    "\2\125\1\0\6\125\1\126\10\125\1\244\6\0\1\125"+
    "\11\0\7\125\7\0\1\243\1\0\4\125\1\245\1\125"+
    "\1\126\1\250\1\245\1\125\1\247\2\250\1\125\1\244"+
    "\2\125\1\0\6\125\1\126\10\125\1\244\6\0\1\125"+
    "\11\0\7\125\7\0\1\243\1\0\6\125\1\126\1\200"+
    "\2\125\1\176\2\200\1\125\1\244\2\125\1\0\6\125"+
    "\1\126\10\125\1\244\6\0\1\125\11\0\7\125\7\0"+
    "\1\243\1\0\4\125\1\245\1\125\1\126\1\251\1\245"+
    "\1\125\1\247\1\251\1\246\1\125\1\244\2\125\1\0"+
    "\6\125\1\126\10\125\1\244\6\0\1\125\11\0\7\125"+
    "\7\0\1\243\1\0\6\125\1\126\1\202\2\125\1\176"+
    "\1\202\1\176\1\125\1\244\2\125\70\0\1\252\2\0"+
    "\3\252\5\0\5\125\1\204\1\126\1\125\2\204\4\125"+
    "\2\204\6\0\1\125\11\0\1\204\1\125\1\204\3\125"+
    "\1\204\7\0\1\174\1\0\6\125\1\126\1\205\1\125"+
    "\1\204\3\206\2\204\1\125\1\204\1\0\5\125\1\204"+
    "\1\126\1\125\2\204\4\125\1\204\1\253\6\0\1\125"+
    "\11\0\1\204\1\125\1\204\3\125\1\204\7\0\1\243"+
    "\1\0\4\125\1\245\1\125\1\126\1\206\1\245\1\204"+
    "\3\206\1\204\1\253\1\125\1\204\1\0\5\125\1\204"+
    "\1\126\1\125\2\204\4\125\1\204\1\253\6\0\1\125"+
    "\11\0\1\204\1\125\1\204\3\125\1\204\7\0\1\243"+
    "\1\0\6\125\1\126\1\206\1\125\1\204\3\206\1\204"+
    "\1\253\1\125\1\204\30\0\1\203\52\0\20\125\6\0"+
    "\1\125\11\0\7\125\11\0\7\125\1\0\2\125\3\0"+
    "\4\125\1\0\2\60\12\14\1\165\3\14\6\0\1\14"+
    "\11\0\7\14\11\0\21\14\1\0\2\60\2\14\1\254"+
    "\13\14\6\0\1\14\11\0\7\14\11\0\21\14\10\0"+
    "\1\255\72\0\2\60\4\14\1\256\11\14\6\0\1\14"+
    "\11\0\7\14\11\0\21\14\1\0\2\60\2\14\1\257"+
    "\13\14\6\0\1\14\11\0\7\14\11\0\21\14\1\0"+
    "\2\60\12\14\1\260\3\14\6\0\1\14\11\0\7\14"+
    "\11\0\21\14\1\0\2\60\1\261\15\14\6\0\1\14"+
    "\11\0\7\14\11\0\21\14\1\0\2\60\15\14\1\262"+
    "\6\0\1\14\11\0\7\14\11\0\21\14\1\0\2\60"+
    "\11\14\1\263\4\14\6\0\1\14\11\0\7\14\11\0"+
    "\21\14\1\0\2\60\1\14\1\264\14\14\6\0\1\14"+
    "\11\0\7\14\11\0\21\14\1\0\2\60\15\14\1\265"+
    "\6\0\1\14\11\0\7\14\11\0\21\14\1\0\2\60"+
    "\16\14\6\0\1\14\11\0\7\14\11\0\3\14\1\266"+
    "\15\14\1\0\2\60\16\14\6\0\1\14\11\0\7\14"+
    "\11\0\1\14\1\267\17\14\22\234\1\235\1\270\1\234"+
    "\1\235\54\234\23\235\1\271\56\235\22\163\1\0\1\272"+
    "\1\163\1\0\54\163\1\0\2\60\15\14\1\273\6\0"+
    "\1\14\11\0\7\14\11\0\21\14\1\0\2\60\2\14"+
    "\1\274\13\14\6\0\1\14\11\0\7\14\11\0\21\14"+
    "\1\0\17\125\1\244\6\0\1\125\11\0\7\125\11\0"+
    "\7\125\1\243\2\125\3\243\1\125\1\244\2\125\1\0"+
    "\20\125\6\0\1\125\1\275\10\0\7\125\7\0\1\174"+
    "\1\0\7\125\1\175\2\125\3\176\4\125\1\0\5\125"+
    "\1\245\2\125\2\245\4\125\2\245\6\0\1\125\11\0"+
    "\1\245\1\125\1\245\3\125\1\245\7\0\1\174\1\0"+
    "\7\125\1\276\1\125\1\245\3\277\2\245\1\125\1\245"+
    "\1\0\17\125\1\244\6\0\1\125\11\0\7\125\7\0"+
    "\1\243\1\0\7\125\1\246\2\125\1\247\2\246\1\125"+
    "\1\244\2\125\20\0\1\300\36\0\1\243\10\0\1\247"+
    "\2\0\3\247\1\0\1\300\1\301\2\0\6\125\1\126"+
    "\10\125\1\244\6\0\1\125\11\0\7\125\7\0\1\243"+
    "\1\0\6\125\1\126\1\250\2\125\1\247\2\250\1\125"+
    "\1\244\2\125\1\0\6\125\1\126\10\125\1\244\6\0"+
    "\1\125\11\0\7\125\7\0\1\243\1\0\6\125\1\126"+
    "\1\251\2\125\1\247\1\251\1\246\1\125\1\244\2\125"+
    "\1\0\20\125\6\0\1\125\11\0\7\125\11\0\7\125"+
    "\1\252\2\125\3\252\2\125\1\126\1\125\1\0\5\125"+
    "\1\204\1\126\1\125\2\204\4\125\2\204\6\0\1\125"+
    "\1\275\10\0\1\204\1\125\1\204\3\125\1\204\7\0"+
    "\1\174\1\0\6\125\1\126\1\205\1\125\1\204\3\206"+
    "\2\204\1\125\1\204\5\0\1\302\75\0\2\60\4\14"+
    "\1\303\11\14\6\0\1\14\11\0\7\14\11\0\21\14"+
    "\1\0\2\60\1\14\1\304\14\14\6\0\1\14\11\0"+
    "\7\14\11\0\21\14\1\0\2\60\1\14\1\305\14\14"+
    "\6\0\1\14\11\0\7\14\11\0\21\14\1\0\2\60"+
    "\13\14\1\306\2\14\6\0\1\14\11\0\7\14\11\0"+
    "\21\14\1\0\2\60\6\14\1\307\7\14\6\0\1\14"+
    "\11\0\7\14\11\0\21\14\1\0\2\60\2\14\1\310"+
    "\13\14\6\0\1\14\11\0\7\14\11\0\21\14\23\0"+
    "\1\311\56\0\22\163\1\0\1\312\1\163\1\0\54\163"+
    "\70\0\1\313\2\0\3\313\5\0\5\125\1\245\2\125"+
    "\2\245\4\125\1\245\1\314\6\0\1\125\11\0\1\245"+
    "\1\125\1\245\3\125\1\245\7\0\1\243\1\0\4\125"+
    "\1\245\2\125\1\277\2\245\3\277\1\245\1\314\1\125"+
    "\1\245\1\0\5\125\1\245\2\125\2\245\4\125\1\245"+
    "\1\314\6\0\1\125\11\0\1\245\1\125\1\245\3\125"+
    "\1\245\7\0\1\243\1\0\7\125\1\277\1\125\1\245"+
    "\3\277\1\245\1\314\1\125\1\245\30\0\1\275\52\0"+
    "\2\60\16\14\6\0\1\14\11\0\7\14\11\0\2\14"+
    "\1\315\16\14\1\0\2\60\16\14\6\0\1\14\11\0"+
    "\7\14\11\0\5\14\1\316\13\14\1\0\2\60\1\14"+
    "\1\317\14\14\6\0\1\14\11\0\7\14\11\0\21\14"+
    "\23\0\1\24\56\0\22\163\1\0\1\320\1\163\1\0"+
    "\54\163\1\0\20\125\6\0\1\125\11\0\7\125\11\0"+
    "\7\125\1\313\2\125\3\313\4\125\1\0\5\125\1\245"+
    "\2\125\2\245\4\125\2\245\6\0\1\125\1\275\10\0"+
    "\1\245\1\125\1\245\3\125\1\245\7\0\1\174\1\0"+
    "\7\125\1\276\1\125\1\245\3\277\2\245\1\125\1\245"+
    "\1\0\2\60\15\14\1\321\6\0\1\14\11\0\7\14"+
    "\11\0\21\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10692];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\1\11\7\1\1\11\6\1\6\11"+
    "\1\1\1\11\34\1\1\0\2\1\2\11\4\1\2\0"+
    "\12\1\1\0\3\1\1\0\22\1\1\0\3\1\1\0"+
    "\1\1\1\0\2\1\1\0\6\1\1\0\3\1\1\0"+
    "\3\1\1\0\17\1\1\11\2\0\11\1\1\0\5\1"+
    "\1\0\13\1\1\0\3\1\1\0\2\1\1\0\1\1"+
    "\1\11\6\1\1\0\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /*  Generamos un java_cup.Symbol para guardar el tipo de token
        encontrado */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    /* Generamos un Symbol para el tipo de token encontrado
       junto con su valor */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 292) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(sym.EOF, new String("Fin de Archivo"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.ERROR_INV, yytext());
            }
          case 49: break;
          case 2: 
            { return symbol(sym.ERROR_CHA);
            }
          case 50: break;
          case 3: 
            { return symbol(sym.IDENTIFIER, yytext());
            }
          case 51: break;
          case 4: 
            { /*IGNORE*/
            }
          case 52: break;
          case 5: 
            { return symbol(sym.ARITH_OP, yytext());
            }
          case 53: break;
          case 6: 
            { return symbol(sym.ASSIG_OP, yytext());
            }
          case 54: break;
          case 7: 
            { return symbol(sym.COMP_OP, yytext());
            }
          case 55: break;
          case 8: 
            { return symbol(sym.BIT_OP, yytext());
            }
          case 56: break;
          case 9: 
            { return symbol(sym.L_PARENTHESIS_OP, yytext());
            }
          case 57: break;
          case 10: 
            { return symbol(sym.R_PARENTHESIS_OP, yytext());
            }
          case 58: break;
          case 11: 
            { return symbol(sym.L_BRACKET_OP, yytext());
            }
          case 59: break;
          case 12: 
            { return symbol(sym.R_BRACKET_OP, yytext());
            }
          case 60: break;
          case 13: 
            { return symbol(sym.COLON_OP, yytext());
            }
          case 61: break;
          case 14: 
            { return symbol(sym.COMMA, yytext());
            }
          case 62: break;
          case 15: 
            { return symbol(sym.PROPERTY_OP, yytext());
            }
          case 63: break;
          case 16: 
            { return symbol(sym.SEMICOLON_OP, yytext());
            }
          case 64: break;
          case 17: 
            { if(SemanticActions.isInteger(yytext())){
                                    //System.out.println("ES ENTEROOO");
                                    return symbol(sym.NUM_LIT, new Integer(yytext())); 
                                }
                                else{

                                    if(SemanticActions.isFloat(yytext())){
                                        //System.out.println("ES FLOAT");
                                        return symbol(sym.NUM_LIT, new Float(yytext())); 
                                    }
                                    else{
                                        System.out.println("ES IMAGINARIO");
                                    }
                                    
                                }
            }
          case 65: break;
          case 18: 
            { return symbol(sym.ERROR_ID, yytext());
            }
          case 66: break;
          case 19: 
            { return symbol(sym.IN, yytext());
            }
          case 67: break;
          case 20: 
            { return symbol(sym.IF, yytext());
            }
          case 68: break;
          case 21: 
            { return symbol(sym.LOGICAL_OP, yytext());
            }
          case 69: break;
          case 22: 
            { return symbol(sym.ERROR_LIT, yytext());
            }
          case 70: break;
          case 23: 
            { return symbol(sym.STRING_LIT, new String(yytext()));
            }
          case 71: break;
          case 24: 
            { return symbol(sym.TYPE_INT, yytext());
            }
          case 72: break;
          case 25: 
            { return symbol(sym.TRY, yytext());
            }
          case 73: break;
          case 26: 
            { return symbol(sym.FOR, yytext());
            }
          case 74: break;
          case 27: 
            { return symbol(sym.AND, yytext());
            }
          case 75: break;
          case 28: 
            { return symbol(sym.DEF, yytext());
            }
          case 76: break;
          case 29: 
            { return symbol(sym.CHAR_LIT, new String(yytext()));
            }
          case 77: break;
          case 30: 
            { return symbol(sym.TYPE_LIST, yytext());
            }
          case 78: break;
          case 31: 
            { return symbol(sym.TYPE_CHAR, yytext());
            }
          case 79: break;
          case 32: 
            { return symbol(sym.ELIF, yytext());
            }
          case 80: break;
          case 33: 
            { return symbol(sym.ELSE, yytext());
            }
          case 81: break;
          case 34: 
            { return symbol(sym.BOOLEAN_LIT, new Boolean(yytext()));
            }
          case 82: break;
          case 35: 
            { return symbol(sym.INPUT, yytext());
            }
          case 83: break;
          case 36: 
            { return symbol(sym.TYPE_FLOAT, yytext());
            }
          case 84: break;
          case 37: 
            { return symbol(sym.CLASS, yytext());
            }
          case 85: break;
          case 38: 
            { return symbol(sym.RANGE, yytext());
            }
          case 86: break;
          case 39: 
            { return symbol(sym.BREAK, yytext());
            }
          case 87: break;
          case 40: 
            { return symbol(sym.WHILE, yytext());
            }
          case 88: break;
          case 41: 
            { return symbol(sym.PRINT, yytext());
            }
          case 89: break;
          case 42: 
            { return symbol(sym.IS_NOT, yytext());
            }
          case 90: break;
          case 43: 
            { return symbol(sym.RETURN, yytext());
            }
          case 91: break;
          case 44: 
            { return symbol(sym.TYPE_STRING, yytext());
            }
          case 92: break;
          case 45: 
            { return symbol(sym.EXCEPT, yytext());
            }
          case 93: break;
          case 46: 
            { return symbol(sym.FINALLY, yytext());
            }
          case 94: break;
          case 47: 
            { return symbol(sym.TYPE_BOOLEAN, yytext());
            }
          case 95: break;
          case 48: 
            { return symbol(sym.CONTINUE, yytext());
            }
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
